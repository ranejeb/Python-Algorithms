"""
Сортировка вставками
Как и сортировка выборкой, этот алгоритм сегментирует 
список на две части: отсортированную и неотсортированную. 
Алгоритм перебирает второй сегмент и вставляет текущий 
элемент в правильную позицию первого сегмента.

Алгоритм
Предполагается, что первый элемент списка отсортирован. 
Переходим к следующему элементу, обозначим его х. Если х 
больше первого, оставляем его на своём месте. Если он меньше, 
копируем его на вторую позицию, а х устанавливаем как первый 
элемент.

Переходя к другим элементам несортированного сегмента, 
перемещаем более крупные элементы в отсортированном сегменте 
вверх по списку, пока не встретим элемент меньше x или не 
дойдём до конца списка. В первом случае x помещается на 
правильную позицию.

Время сортировки
Время сортировки вставками в 
среднем равно O(n²), где n — количество элементов списка.
"""
def insertion_sort(nums):  
    # Сортировку начинаем со второго элемента, т.к. считается, что первый элемент уже отсортирован
    for i in range(1, len(nums)):
        item_to_insert = nums[i]
        # Сохраняем ссылку на индекс предыдущего элемента
        j = i - 1
        # Элементы отсортированного сегмента перемещаем вперёд, если они больше
        # элемента для вставки
        while j >= 0 and nums[j] > item_to_insert:
            nums[j + 1] = nums[j]
            j -= 1
        # Вставляем элемент
        nums[j + 1] = item_to_insert

# Проверяем, что оно работает
random_list_of_nums = [9, 1, 15, 28, 6]  
insertion_sort(random_list_of_nums)  
print(random_list_of_nums)